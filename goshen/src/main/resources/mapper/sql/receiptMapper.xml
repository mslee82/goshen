<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.hk.gs.receipt.mapper.ReceiptMapper">

    <select id="getReceiptList" parameterType="hashmap" resultType="hashmap">
    	SELECT @rownum := @rownum + 1 as rownum
    		   , k.*
    		   , CASE WHEN DATE_FORMAT(k.sell_dt,'%m') = DATE_FORMAT(k.return_date,'%m') THEN DATE_FORMAT(k.return_date,'%d일')
    		     	  ELSE DATE_FORMAT(k.return_date,'%m월%d일')
    		      END return_dt
    	  FROM (
				 /* 판매내역 */
				 SELECT a.sell_dt
				 		, a.cust_no
						, c.cust_nm
						, c.branch_nm
						, d.prod_nm
						, a.sell_quan
						, a.unit
						, e.unit_nm
						, d.tax_yn
						, IFNULL(b.prod_price, f.prod_price) AS prod_price
						, CASE WHEN d.tax_yn = 'N' THEN CAST(TRUNCATE(a.sell_quan * IFNULL(b.prod_price, f.prod_price), 2) AS double)
							   ELSE NULL
						   END tax_free /*면세*/
						, CASE WHEN d.tax_yn = 'Y' THEN CAST(TRUNCATE( (a.sell_quan * IFNULL(b.prod_price, f.prod_price)) / 1.1, 2) AS double)
							   ELSE NULL
						   END supply /*공급가액*/
						, CASE WHEN d.tax_yn = 'Y' THEN CAST(TRUNCATE(( (a.sell_quan * IFNULL(b.prod_price, f.prod_price)) / 1.1) /10, 2) AS double)
							   ELSE NULL
						   END tax /*부가세*/
						, a.sell_quan * b.prod_price AS total_price /*계*/
						, d.prod_typ
						, '' AS gb /*반품구분*/
						, '' AS return_date
				  FROM sell a LEFT JOIN product_price  b
									 ON a.cust_no = b.cust_no
								    AND a.prod_no = b.prod_no
								    AND a.unit = b.unit
								    AND a.sell_dt BETWEEN b.start_dt AND b.end_dt
				  			  	   JOIN customer c
									 ON a.cust_no = c.cust_no
							  LEFT JOIN product d
								 	 ON a.prod_no = d.prod_no
							  LEFT JOIN unit e
								     ON a.unit = e.unit
							  LEFT JOIN com_product_price f
							         ON a.prod_no = f.prod_no
							        AND a.unit = f.unit
								    AND a.sell_dt BETWEEN f.start_dt AND f.end_dt
						, (SELECT @rownum:=0) TMP
				 WHERE a.cust_no = #{cust_no}
				   AND a.sell_dt BETWEEN DATE_FORMAT(#{fromSellDt},'%Y%m%d') AND DATE_FORMAT(#{toSellDt},'%Y%m%d')  
			<choose>
				<when test="sellType != null and sellType == 'exclude'">
				   /*미입 교환 제외 교환은 무조건 작업표에만 포함시킴*/
				   --AND (a.sell_type = '' OR a.sell_type IS NULL)
				   AND IFNULL(a.sell_type, '') = ''
				</when>
				<when test="sellType != null and sellType == 'include'">
				   /*미입포함 교환 제외 교환은 무조건 작업표에만 포함시킴*/
			   	   --AND (a.sell_type != 'E' OR a.sell_type IS NULL)
			   	   AND IFNULL(a.sell_type, '') != 'E'
				</when>
			 	<otherwise>
			 	   
			 	</otherwise>
		 	</choose>
			   	<if test="sReceiptLv != null and sReceiptLv != '' ">
					<if test="sReceiptLv eq '1'.toString()">
					AND d.tax_yn = 'Y'
					</if>
					<if test="sReceiptLv eq '2'.toString()">
				   	AND d.tax_yn = 'N'
				   </if>				   
				</if> 
				 UNION
				 /* 반품내역 */
				 SELECT f.return_dt AS sell_dt
				 		, a.cust_no
						, c.cust_nm
						, c.branch_nm
						, d.prod_nm
						, (f.return_quan * -1) AS sell_quan
						, a.unit
						, e.unit_nm
						, d.tax_yn
						, IFNULL(b.prod_price, g.prod_price) AS prod_price
						, CASE WHEN d.tax_yn = 'N' THEN CAST(TRUNCATE((f.return_quan * IFNULL(b.prod_price, g.prod_price)), 2) * -1 AS double)
							   ELSE NULL
						   END tax_free /*면세*/
						, CASE WHEN d.tax_yn = 'Y' THEN CAST(TRUNCATE((f.return_quan * IFNULL(b.prod_price, g.prod_price)) / 1.1, 2) * -1 AS double)
							   ELSE NULL
						   END supply /*공급가액*/
						, CASE WHEN d.tax_yn = 'Y' THEN CAST(TRUNCATE(((f.return_quan * IFNULL(b.prod_price, g.prod_price)) / 1.1) /10, 2) * -1 AS double)
							   ELSE NULL
						   END tax /*부가세*/
						, (f.return_quan * IFNULL(b.prod_price, g.prod_price)) * -1	AS total_price /*계*/
						, d.prod_typ
						, 'R' AS gb /*반품구분*/
						, f.sell_dt AS return_date
				  FROM sell a LEFT JOIN product_price  b
									 ON a.cust_no = b.cust_no
								    AND a.prod_no = b.prod_no
								    AND a.unit = b.unit
								    AND a.sell_dt BETWEEN b.start_dt AND b.end_dt
				  			  	   JOIN customer c
									 ON a.cust_no = c.cust_no
							  LEFT JOIN product d
								 	 ON a.prod_no = d.prod_no
							  LEFT JOIN unit e
								     ON a.unit = e.unit
						           JOIN sell_return f
						     		 ON a.cust_no = f.cust_no
						     		AND a.sell_dt = f.sell_dt
						     		AND a.sell_seq = f.sell_seq	
						      LEFT JOIN com_product_price g
							         ON a.prod_no = g.prod_no
							        AND a.unit = g.unit
								    AND a.sell_dt BETWEEN g.start_dt AND g.end_dt				     		
						, (SELECT @rownum:=0) TMP
				 WHERE a.cust_no = #{cust_no}
				   AND f.return_dt BETWEEN DATE_FORMAT(#{fromSellDt},'%Y%m%d') AND DATE_FORMAT(#{toSellDt},'%Y%m%d')
			   <if test="sReceiptLv != null and sReceiptLv != '' ">
					<if test="sReceiptLv eq '1'.toString()">
					AND d.tax_yn = 'Y'
					</if>
					<if test="sReceiptLv eq '2'.toString()">
				   	AND d.tax_yn = 'N'
				   </if>				   
			   </if> 
			) k
		ORDER BY k.tax_yn, k.prod_typ, k.prod_nm, k.gb
    </select>

    <select id="getCustInfo" parameterType="hashmap" resultType="hashmap">
		SELECT a.cust_no
				, a.cust_nm
				, DATE_FORMAT(SYSDATE()	, '%Y년 %m월 %d일') today	
				, CONCAT(a.receipt_lv) receipt_lv
				, IFNULL(a.mainstore_yn, 'N') mainstore_yn
				, IFNULL(a.mainstore_cust_no, 'N') mainstore_cust_no
				, IFNULL(a.branch_nm, 'N') branch_nm		
		  FROM customer a
		 WHERE a.cust_no = #{cust_no}
    </select>
    
    <select id="getSellDtList" parameterType="hashmap" resultType="hashmap">
    	SELECT k.*
    	  FROM (
				SELECT DISTINCT DATE_FORMAT(a.sell_dt,'%Y-%m-%d') dt_list
						, c.company_nm
						, c.account
						, c.bank_nm
						, c.reg_no
						, c.phone
						, b.cust_no
						, b.cust_nm
						, c.receipt_lv /* company_info lv을 따라가야 반복하며 다운로드시 tax_yn 여부를 따라 select 할 수 있음*/
						, b.branch_nm				
				  FROM sell a JOIN customer b
				  			    ON a.cust_no = b.cust_no
				  			  JOIN company_info c
				  			    ON b.receipt_lv >= c.receipt_lv	/* 영수증 발행 레벨 */
				  			  JOIN product d
				  			    ON a.prod_no = d.prod_no
				 WHERE a.sell_dt BETWEEN DATE_FORMAT(#{fromSellDt},'%Y%m%d') AND DATE_FORMAT(#{toSellDt},'%Y%m%d')  
				<if test="sMainStoreYn != null and sMainStoreYn eq 'N'.toString()">
				   AND a.cust_no = #{cust_no}
				</if>
				<if test="sMainStoreYn != null and sMainStoreYn eq 'Y'.toString()">
				   AND (b.cust_no = #{cust_no} OR b.mainstore_cust_no = #{cust_no})		   
				</if>
				
				 UNION
				 /* 반품내역 */
				 SELECT DISTINCT DATE_FORMAT(f.return_dt,'%Y-%m-%d') dt_list
						, c.company_nm
						, c.account
						, c.bank_nm
						, c.reg_no
						, c.phone
						, b.cust_no
						, b.cust_nm
						, c.receipt_lv /* company_info lv을 따라가야 반복하며 다운로드시 tax_yn 여부를 따라 select 할 수 있음*/
						, b.branch_nm			
				  FROM sell a JOIN customer b
				  			    ON a.cust_no = b.cust_no
				  			  JOIN company_info c
				  			    ON b.receipt_lv >= c.receipt_lv	/* 영수증 발행 레벨 */
				  			  JOIN product d
				  			    ON a.prod_no = d.prod_no
					          JOIN sell_return f
					     		ON a.cust_no = f.cust_no
					     	   AND a.sell_dt = f.sell_dt
					     	   AND a.sell_seq = f.sell_seq				     		
				 WHERE a.cust_no = #{cust_no}
				   AND f.return_dt BETWEEN DATE_FORMAT(#{fromSellDt},'%Y%m%d') AND DATE_FORMAT(#{toSellDt},'%Y%m%d')
				<if test="sMainStoreYn != null and sMainStoreYn eq 'N'.toString()">
				   AND a.cust_no = #{cust_no}
				</if>
				<if test="sMainStoreYn != null and sMainStoreYn eq 'Y'.toString()">
				   AND (b.cust_no = #{cust_no} OR b.mainstore_cust_no = #{cust_no})		   
				</if>   
			) k
		ORDER BY k.dt_list asc 
    </select>
    
    <select id="getSellDtListLv3" parameterType="hashmap" resultType="hashmap">
    	SELECT k.*
    	  FROM (
				SELECT DISTINCT DATE_FORMAT(a.sell_dt,'%Y-%m-%d') dt_list
						, c.company_nm
						, c.account
						, c.bank_nm
						, c.reg_no
						, c.phone
						, b.cust_no
						, b.cust_nm
						, b.receipt_lv
						, b.branch_nm				
				  FROM sell a JOIN customer b
				  			    ON a.cust_no = b.cust_no
				  			  JOIN (
					  			  	SELECT GROUP_CONCAT(reg_no ORDER BY receipt_lv DESC) AS reg_no
										 , GROUP_CONCAT(company_nm ORDER BY receipt_lv DESC) AS company_nm
										 , MAX(phone) AS phone
										 , MAX(bank_nm) AS bank_nm
										 , GROUP_CONCAT(account ORDER BY receipt_lv DESC) AS account
								  	 FROM company_info
				  			  ) c
				  			  JOIN product d
				  			    ON a.prod_no = d.prod_no
				 WHERE a.sell_dt BETWEEN DATE_FORMAT(#{fromSellDt},'%Y%m%d') AND DATE_FORMAT(#{toSellDt},'%Y%m%d')  
				<if test="sMainStoreYn != null and sMainStoreYn eq 'N'.toString()">
				   AND a.cust_no = #{cust_no}
				</if>
				<if test="sMainStoreYn != null and sMainStoreYn eq 'Y'.toString()">
				   AND (b.cust_no = #{cust_no} OR b.mainstore_cust_no = #{cust_no})		   
				</if>
				
				 UNION
				 /* 반품내역 */
				 SELECT DISTINCT DATE_FORMAT(f.return_dt,'%Y-%m-%d') dt_list
						, c.company_nm
						, c.account
						, c.bank_nm
						, c.reg_no
						, c.phone
						, b.cust_no
						, b.cust_nm
						, b.receipt_lv
						, b.branch_nm			
				  FROM sell a JOIN customer b
				  			    ON a.cust_no = b.cust_no
				  			  JOIN (
					  			  	SELECT GROUP_CONCAT(reg_no ORDER BY receipt_lv DESC) AS reg_no
										 , GROUP_CONCAT(company_nm ORDER BY receipt_lv DESC) AS company_nm
										 , MAX(phone) AS phone
										 , MAX(bank_nm) AS bank_nm
										 , GROUP_CONCAT(account ORDER BY receipt_lv DESC) AS account
								  	 FROM company_info
				  			  ) c
				  			  JOIN product d
				  			    ON a.prod_no = d.prod_no
					          JOIN sell_return f
					     		ON a.cust_no = f.cust_no
					     	   AND a.sell_dt = f.sell_dt
					     	   AND a.sell_seq = f.sell_seq				     		
				 WHERE a.cust_no = #{cust_no}
				   AND f.return_dt BETWEEN DATE_FORMAT(#{fromSellDt},'%Y%m%d') AND DATE_FORMAT(#{toSellDt},'%Y%m%d')
				<if test="sMainStoreYn != null and sMainStoreYn eq 'N'.toString()">
				   AND a.cust_no = #{cust_no}
				</if>
				<if test="sMainStoreYn != null and sMainStoreYn eq 'Y'.toString()">
				   AND (b.cust_no = #{cust_no} OR b.mainstore_cust_no = #{cust_no})		   
				</if>   
			) k
		ORDER BY k.dt_list asc 
    </select>
    
    <select id="getDailyTotalPrice" parameterType="hashmap" resultType="hashmap">
    	SELECT k.sell_dt
    		   , SUM(total_price) AS total_price
    	  FROM (
				 /* 판매내역 */
				 SELECT a.sell_dt
						, d.prod_nm						
						, (a.sell_quan * IFNULL(b.prod_price, f.prod_price)) AS total_price /*계*/
				  FROM sell a LEFT JOIN product_price b
									 ON a.cust_no = b.cust_no
								    AND a.prod_no = b.prod_no
								    AND a.unit = b.unit
								    AND a.sell_dt BETWEEN b.start_dt AND b.end_dt
				  			  	   JOIN customer c
									 ON a.cust_no = c.cust_no
							  LEFT JOIN product d
								 	 ON a.prod_no = d.prod_no
							  LEFT JOIN unit e
								     ON a.unit = e.unit
							  LEFT JOIN com_product_price f
							         ON a.prod_no = f.prod_no
							        AND a.unit = f.unit
								    AND a.sell_dt BETWEEN f.start_dt AND f.end_dt
				 WHERE a.cust_no = #{cust_no}
				   AND a.sell_dt BETWEEN DATE_FORMAT(#{fromSellDt},'%Y%m%d') AND DATE_FORMAT(#{toSellDt},'%Y%m%d')  
			   <if test="sReceiptLv != null and sReceiptLv eq '2'.toString()">	   	  
			   	   AND ((c.receipt_lv = 2 AND d.tax_yn = 'N') OR (c.receipt_lv = 1 AND d.tax_yn = 'Y'))
			   </if>
				 UNION
				 /* 반품내역 */
				 SELECT f.return_dt AS sell_dt
						, d.prod_nm						
						, (f.return_quan * IFNULL(b.prod_price, g.prod_price)) * -1	AS total_price /*계*/
				  FROM sell a LEFT JOIN product_price b
									 ON a.cust_no = b.cust_no
								    AND a.prod_no = b.prod_no
								    AND a.unit = b.unit
								    AND a.sell_dt BETWEEN b.start_dt AND b.end_dt
				  			  	   JOIN customer c
									 ON a.cust_no = c.cust_no
							  LEFT JOIN product d
								 	 ON a.prod_no = d.prod_no
							  LEFT JOIN unit e
								     ON a.unit = e.unit
						           JOIN sell_return f
						     		 ON a.cust_no = f.cust_no
						     		AND a.sell_dt = f.sell_dt
						     		AND a.sell_seq = f.sell_seq	
						      LEFT JOIN com_product_price g
							         ON a.prod_no = g.prod_no
							        AND a.unit = g.unit
								    AND a.sell_dt BETWEEN g.start_dt AND g.end_dt				     		
				 WHERE a.cust_no = #{cust_no}
				   AND f.return_dt BETWEEN DATE_FORMAT(#{fromSellDt},'%Y%m%d') AND DATE_FORMAT(#{toSellDt},'%Y%m%d')
			   <if test="sReceiptLv != null and sReceiptLv eq '2'.toString()">
			   	   AND ((c.receipt_lv = 2 AND d.tax_yn = 'N') OR (c.receipt_lv = 1 AND d.tax_yn = 'Y'))
			   </if>
			) k
		ORDER BY k.sell_dt
    </select>
    
    <select id="getSellTotalPrice" parameterType="hashmap" resultType="hashmap">
    	SELECT DATE_FORMAT(k.sell_dt + 1, '%Y%m%d') sell_dt
    			, SUM(price) total_price
    	  FROM (
				 /* 판매내역 */
				 SELECT a.sell_dt
				 		, a.sell_seq
				 		, '' AS return_seq
				 		, a.cust_no
						, c.cust_nm
						, c.branch_nm
						, d.prod_nm
						, a.sell_quan
						, a.unit
						, e.unit_nm
						, d.tax_yn
						, IFNULL(b.prod_price, f.prod_price) AS prod_price
						, d.prod_typ
						, (a.sell_quan * b.prod_price) AS price
						, '' AS gb /*반품구분*/
				  FROM sell a LEFT JOIN product_price b
									 ON a.cust_no = b.cust_no
								    AND a.prod_no = b.prod_no
								    AND a.unit = b.unit
								    AND a.sell_dt BETWEEN b.start_dt AND b.end_dt
				  			  	   JOIN customer c
									 ON a.cust_no = c.cust_no
							  LEFT JOIN product d
								 	 ON a.prod_no = d.prod_no
							  LEFT JOIN unit e
								     ON a.unit = e.unit
							  LEFT JOIN com_product_price f
							         ON a.prod_no = f.prod_no
							        AND a.unit = f.unit
								    AND a.sell_dt BETWEEN f.start_dt AND f.end_dt
				 WHERE a.cust_no = #{cust_no}
				   AND a.sell_dt = DATE_FORMAT(DATE_ADD(DATE_FORMAT(#{fromSellDt},'%Y%m%d'), INTERVAL -1 DAY), '%Y%m%d') 
				 UNION
				 /* 반품내역 */
				 SELECT f.return_dt AS sell_dt
				 		, '' AS sell_seq
				 		, f.return_seq
				 		, a.cust_no
						, c.cust_nm
						, c.branch_nm
						, d.prod_nm
						, f.return_quan AS sell_quan
						, a.unit
						, e.unit_nm
						, d.tax_yn
						, IFNULL(b.prod_price, g.prod_price) AS prod_price
						, d.prod_typ
						, (f.return_quan * b.prod_price) AS price
						, 'R' AS gb /*반품구분*/
				  FROM sell a LEFT JOIN product_price b
									 ON a.cust_no = b.cust_no
								    AND a.prod_no = b.prod_no
								    AND a.unit = b.unit
								    AND a.sell_dt BETWEEN b.start_dt AND b.end_dt
				  			  	   JOIN customer c
									 ON a.cust_no = c.cust_no
							  LEFT JOIN product d
								 	 ON a.prod_no = d.prod_no
							  LEFT JOIN unit e
								     ON a.unit = e.unit
						           JOIN sell_return f
						     		 ON a.cust_no = f.cust_no
						     		AND a.sell_dt = f.sell_dt
						     		AND a.sell_seq = f.sell_seq		
						      LEFT JOIN com_product_price g
							         ON a.prod_no = g.prod_no
							        AND a.unit = g.unit
								    AND a.sell_dt BETWEEN g.start_dt AND g.end_dt		     		
				 WHERE a.cust_no = #{cust_no}
				   AND f.return_dt = DATE_FORMAT(DATE_ADD(DATE_FORMAT(#{fromSellDt},'%Y%m%d'), INTERVAL -1 DAY), '%Y%m%d') 
			) k
		GROUP BY k.sell_dt, k.branch_nm
    </select>
    
    <select id="getCheckSellType" parameterType="hashmap" resultType="hashmap">
		SELECT COUNT(*) cnt 
		  FROM sell a
		 WHERE a.cust_no = #{cust_no}
		   AND a.sell_dt BETWEEN DATE_FORMAT(#{fromSellDt},'%Y%m%d') AND DATE_FORMAT(#{toSellDt},'%Y%m%d')
		   AND a.sell_type = 'N'  			
    </select>
    
    <insert id="setProductPrice" parameterType="hashmap">
		INSERT INTO product_price (start_dt
									, cust_no
									, prod_no
									, prod_seq
									, prod_price
									, unit
									, end_dt
									) 
				VALUES
						( #{sell_dt}
						, #{cust_no}
						, (SELECT prod_no FROM product WHERE prod_nm = #{prod_nm})
						, #{next_prod_seq}
						, #{prod_price}
						, (SELECT unit FROM unit WHERE unit_nm = #{unit_nm})
						, '99991231'
						)
    </insert>
    
    <update id="setProductPriceEndDt" parameterType="hashmap">	
		UPDATE product_price
		   SET end_dt = DATE_FORMAT(DATE_ADD(#{sell_dt}, INTERVAL -1 DAY),'%Y%m%d')
		 WHERE cust_no = #{cust_no}
		   AND prod_no = #{prod_no}
		   AND prod_seq = #{prod_seq}
		   AND unit = #{unit}
	</update>
	
	<update id="setUpdProductPrice" parameterType="hashmap">	
		UPDATE product_price
		   SET prod_price = #{prod_price}
		 WHERE cust_no = #{cust_no}
		   AND prod_no = #{prod_no}
		   AND prod_seq = #{prod_seq}
		   AND unit = #{unit}
	</update>
	
	<select id="getProductPriceInfo" parameterType="hashmap" resultType="hashmap">
		SELECT cust_no
			   , prod_no
			   , prod_price
			   , unit
			   , start_dt
			   , prod_seq
			   , prod_seq + 1 AS next_prod_seq
		  FROM product_price
		 WHERE cust_no = 
		 				<choose>
							<when test="branch_nm != null and branch_nm != ''">
						   		 (SELECT cust_no FROM customer WHERE (cust_nm = #{cust_nm} OR cust_al = #{cust_nm}) AND branch_nm = #{branch_nm})		  
						 	</when>
						 	<otherwise>
								 (SELECT cust_no FROM customer WHERE (cust_nm = #{cust_nm} OR cust_al = #{cust_nm}) AND (branch_nm IS NULL OR branch_nm = '') )
						 	</otherwise>
						</choose>
		   AND prod_no = (SELECT prod_no FROM product WHERE prod_nm = #{prod_nm})
		   AND unit = (SELECT unit FROM unit WHERE unit_nm = #{unit_nm})
		   AND end_dt = '99991231'
	</select>
</mapper>